/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /Users/robjs/Code/go/src/github.com/openconfig/ygot/ygen/commongen.go
using the following YANG input files:
	- simple.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled.
func Unmarshal(data []byte, destStruct ygot.GoStruct) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree)
}

// Simple_A represents the /simple/a YANG schema element.
type Simple_A struct {
	B	*string	`path:"b" module:"simple"`
}

// IsYANGGoStruct ensures that Simple_A implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Simple_A) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *Simple_A) Validate() error {
	if err := ytypes.Validate(SchemaTree["Simple_A"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Simple_A) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }



var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xc1, 0x4e, 0xc3, 0x30,
		0x0c, 0xbd, 0xef, 0x2b, 0x22, 0x9f, 0x27, 0x0d, 0x6e, 0xa8, 0xb7, 0x0a, 0x84, 0x90, 0x90, 0x10,
		0x62, 0xdc, 0x91, 0x57, 0xbc, 0x2e, 0x82, 0x26, 0x55, 0xe2, 0x0a, 0x26, 0xd4, 0x7f, 0x47, 0x6b,
		0xb2, 0x32, 0xa7, 0xc9, 0x81, 0x5b, 0x6c, 0x3f, 0xfb, 0x3d, 0x3f, 0xe7, 0x67, 0xa5, 0x94, 0x52,
		0xf0, 0x84, 0x1d, 0x41, 0xa5, 0x00, 0xd6, 0x21, 0x7e, 0xd4, 0xe6, 0x1d, 0x2a, 0x75, 0x15, 0xc3,
		0x5b, 0x6b, 0xf6, 0xba, 0xbd, 0x48, 0xdc, 0x69, 0x07, 0x95, 0x0a, 0xcd, 0x53, 0x02, 0x45, 0x28,
		0x66, 0x62, 0x1c, 0x3a, 0x17, 0xe2, 0xf0, 0xeb, 0x24, 0x9d, 0x92, 0xcc, 0x85, 0x67, 0x47, 0x7b,
		0xfd, 0xbd, 0x20, 0x10, 0x24, 0x3e, 0x21, 0x99, 0x8a, 0x5b, 0x3b, 0xb8, 0x86, 0xb2, 0x8d, 0x41,
		0x08, 0x1d, 0xbf, 0xac, 0x3b, 0x69, 0x81, 0x3e, 0x70, 0xac, 0xf3, 0xc0, 0x07, 0xf4, 0xb5, 0x6b,
		0x87, 0x8e, 0x0c, 0x43, 0xa5, 0xd8, 0x0d, 0x54, 0x00, 0x5e, 0xa0, 0xc0, 0xc3, 0x02, 0x33, 0x8a,
		0xcc, 0x98, 0xec, 0x99, 0x9a, 0x3a, 0x17, 0x76, 0xe5, 0x15, 0xce, 0xfb, 0xef, 0x4a, 0xd2, 0xe5,
		0x25, 0x17, 0xe5, 0x92, 0xe9, 0x33, 0xe0, 0xf5, 0xd8, 0x97, 0x1d, 0x94, 0x27, 0x60, 0xa7, 0x4d,
		0x5b, 0xd0, 0x21, 0x0e, 0x7f, 0x93, 0x85, 0x8c, 0xff, 0xb4, 0xab, 0x36, 0xc6, 0x32, 0xb2, 0xb6,
		0x26, 0xef, 0x9a, 0x6f, 0x0e, 0xd4, 0x61, 0x8f, 0x7c, 0x38, 0xa9, 0xdb, 0x78, 0xdd, 0xf5, 0x9f,
		0xb4, 0xc1, 0xdc, 0x47, 0xf1, 0xec, 0x86, 0x86, 0x4d, 0x5c, 0x64, 0x3b, 0x21, 0xdf, 0x6a, 0x79,
		0xbf, 0x3f, 0x31, 0xe1, 0x15, 0xe5, 0x94, 0x64, 0x80, 0xf6, 0xf7, 0xf8, 0x41, 0x2f, 0xd6, 0x9e,
		0xbf, 0x4c, 0xe8, 0x5a, 0x8d, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff,
		0xbd, 0xbc, 0x7a, 0x5e, 0x73, 0x03, 0x00, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
}

